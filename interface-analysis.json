{
  "converter_class": {
    "name": "OptimizedFFmpegConverter",
    "methods": [
      {
        "name": "init",
        "signature": "async init()",
        "is_async": true
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "initWorker",
        "signature": "initWorker()",
        "is_async": true
      },
      {
        "name": "switch",
        "signature": "switch (type)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "catch",
        "signature": "catch (error)",
        "is_async": false
      },
      {
        "name": "initDirect",
        "signature": "initDirect()",
        "is_async": true
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "catch",
        "signature": "catch (error)",
        "is_async": false
      },
      {
        "name": "getOptimalSettings",
        "signature": "getOptimalSettings(fileSize, duration = 5)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "convertWebMToMP4",
        "signature": "async convertWebMToMP4(webmBlob, options = {})",
        "is_async": true
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "convertWithWorker",
        "signature": "convertWithWorker(webmBlob, options)",
        "is_async": true
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "switch",
        "signature": "switch (type)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "catch",
        "signature": "catch (error)",
        "is_async": false
      },
      {
        "name": "convertDirect",
        "signature": "convertDirect(webmBlob, options)",
        "is_async": true
      },
      {
        "name": "catch",
        "signature": "catch (error)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "setProgressCallback",
        "signature": "setProgressCallback(callback)",
        "is_async": false
      },
      {
        "name": "setLogCallback",
        "signature": "setLogCallback(callback)",
        "is_async": false
      },
      {
        "name": "isReady",
        "signature": "isReady()",
        "is_async": false
      },
      {
        "name": "getInfo",
        "signature": "getInfo()",
        "is_async": false
      },
      {
        "name": "compositeVideoWithBackground",
        "signature": "async compositeVideoWithBackground(videoBlob, options)",
        "is_async": true
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "catch",
        "signature": "catch (error)",
        "is_async": false
      },
      {
        "name": "compositeWithWorker",
        "signature": "compositeWithWorker(videoBlob, options)",
        "is_async": true
      },
      {
        "name": "switch",
        "signature": "switch (type)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "compositeDirect",
        "signature": "compositeDirect(videoBlob, options)",
        "is_async": true
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "catch",
        "signature": "catch (error)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "catch",
        "signature": "catch (error)",
        "is_async": false
      },
      {
        "name": "detectVideoStart",
        "signature": "detectVideoStart('input_video.webm')",
        "is_async": true
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "for",
        "signature": "for (let i = 0; i < lines.length; i++)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "catch",
        "signature": "catch (error)",
        "is_async": false
      },
      {
        "name": "cancelConversion",
        "signature": "cancelConversion()",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      },
      {
        "name": "destroy",
        "signature": "destroy()",
        "is_async": false
      },
      {
        "name": "if",
        "signature": "if (this.isLoaded)",
        "is_async": false
      }
    ],
    "constructor_params": [
      "useWorker = true"
    ]
  },
  "convert_options": {},
  "usage_patterns": {
    "initialization": [
      "OptimizedFFmpegConverter",
      "OptimizedFFmpegConverter"
    ],
    "method_calls": [
      "cancelConversion",
      "setLogCallback",
      "getInfo",
      "setProgressCallback",
      "destroy",
      "compositeVideoWithBackground",
      "convertWebMToMP4",
      "init"
    ],
    "callbacks": [
      "Progress",
      "Progress",
      "Log",
      "Progress",
      "Log",
      "Progress"
    ]
  },
  "worker": {
    "message_types": [
      "reset_complete",
      "progress",
      "composite_complete",
      "initialized",
      "completed",
      "log",
      "error"
    ],
    "functions": [
      "initFFmpeg",
      "convertVideo",
      "resetWorkerState",
      "compositeVideo"
    ]
  }
}